# .github/workflows/release.yml
name: Release About Time v13

on:
  # 1) Manual trigger for one-click releases
  workflow_dispatch:
    inputs:
      force:
        description: "Force re-release (skip existing tag checks)"
        required: false
        default: "false"
  # 2) Auto-release when module.json version is bumped on main
  push:
    branches: [ "main" ]
    paths:
      - "module.json"

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    env:
      GIT_USER_NAME: "github-actions[bot]"
      GIT_USER_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure jq & zip are available
        run: |
          sudo apt-get update
          sudo apt-get install -y jq zip

      - name: Read manifest values
        id: manifest
        run: |
          set -euo pipefail
          VERSION=$(jq -r '.version' module.json)
          ID=$(jq -r '.id' module.json)
          TITLE=$(jq -r '.title' module.json)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "id=$ID" >> "$GITHUB_OUTPUT"
          echo "title=$TITLE" >> "$GITHUB_OUTPUT"

      - name: Basic schema checks
        run: |
          set -euo pipefail
          jq -e '
            (.id | strings and length>0 and test("^[a-z0-9-]+$"))
            and (.title | strings and length>0)
            and (.version | strings and test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))
            and (.compatibility.minimum | strings)
            and (.compatibility.verified | strings)
            and (.compatibility.maximum | strings)
            and (.esmodules | type=="array" and length>=1 and index("about-time.js") != null and index("vars.js") != null)
            and (.languages | type=="array" and length>=1)
            and (.socket | type=="boolean")
            and (.url | strings and length>0)
            and (.manifest | strings and length>0)
            and (.download | strings and length>0)
          ' module.json >/dev/null

      - name: Validate module id
        run: |
          set -euo pipefail
          ID="${{ steps.manifest.outputs.id }}"
          if [ "$ID" != "about-time-v13" ]; then
            echo "module.json id must be 'about-time-v13' but is '$ID'"
            exit 1
          fi

      - name: Prepare expected tag & download URL
        id: calc
        run: |
          set -euo pipefail
          VERSION="${{ steps.manifest.outputs.version }}"
          TAG="v${VERSION}"
          REPO="${GITHUB_REPOSITORY}"
          EXPECT_DL="https://github.com/${REPO}/releases/download/${TAG}/about-time-v${VERSION}.zip"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "expect_dl=$EXPECT_DL" >> "$GITHUB_OUTPUT"

      - name: Patch module.json download field if needed
        id: patch
        run: |
          set -euo pipefail
          EXPECT_DL="${{ steps.calc.outputs.expect_dl }}"
          CUR_DL=$(jq -r '.download' module.json)
          if [ "$CUR_DL" != "$EXPECT_DL" ]; then
            echo "Patching module.json download to $EXPECT_DL"
            tmp=$(mktemp)
            jq --arg dl "$EXPECT_DL" '.download = $dl' module.json > "$tmp"
            mv "$tmp" module.json
            echo "patched=true" >> "$GITHUB_OUTPUT"
          else
            echo "No patch needed."
            echo "patched=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Commit patched module.json (if changed)
        if: steps.patch.outputs.patched == 'true'
        run: |
          set -euo pipefail
          git config user.name  "${GIT_USER_NAME}"
          git config user.email "${GIT_USER_EMAIL}"
          git add module.json
          git commit -m "chore(release): set download URL for ${{ steps.calc.outputs.tag }}"
          git push

      - name: Create tag if missing
        id: tag
        run: |
          set -euo pipefail
          TAG="${{ steps.calc.outputs.tag }}"
          FORCE="${{ github.event.inputs.force || 'false' }}"
          if git rev-parse "$TAG" >/dev/null 2>&1 && [ "$FORCE" != "true" ]; then
            echo "Tag $TAG already exists; continuing to build/release."
            echo "created=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          git config user.name  "${GIT_USER_NAME}"
          git config user.email "${GIT_USER_EMAIL}"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"
          echo "created=true" >> "$GITHUB_OUTPUT"

      - name: Verify esmodules exist
        run: |
          set -euo pipefail
          jq -r '.esmodules[]' module.json > esmodules.txt
          while IFS= read -r f; do
            echo "Checking esmodule: $f"
            test -f "$f"
          done < esmodules.txt

      - name: Create zip
        id: zip
        run: |
          set -euo pipefail
          VERSION="${{ steps.manifest.outputs.version }}"
          ZIP="about-time-v${VERSION}.zip"

          # required roots
          test -f module.json
          test -f about-time.js
          test -f vars.js
          test -d module
          test -d templates
          test -d lang

          # optional docs
          DOCS=()
          [ -f README.md ] && DOCS+=("README.md")
          [ -f LICENSE ] && DOCS+=("LICENSE")
          [ -f LICENSE.md ] && DOCS+=("LICENSE.md")

          zip -r "$ZIP" \
            module.json about-time.js vars.js \
            module templates lang "${DOCS[@]}" \
            >/dev/null
          echo "zipname=$ZIP" >> "$GITHUB_OUTPUT"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: about-time-dist
          path: ${{ steps.zip.outputs.zipname }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.calc.outputs.tag }}
          name: About Time ${{ steps.calc.outputs.tag }}
          draft: false
          prerelease: false
          files: ${{ steps.zip.outputs.zipname }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
