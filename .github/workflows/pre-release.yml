name: Pre-Release (Ref=Tag, Pinned Asset URLs)

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Branch or tag to build from (must be tag-like, e.g., v13.1.3.0)"
        required: true
        type: string
      module_version:
        description: "Optional override for module.json version (defaults to the version in the selected ref)"
        required: false
        type: string

jobs:
  prerelease:
    name: Build & publish prerelease (tag matches ref)
    runs-on: ubuntu-latest
    permissions:
      contents: write   # create releases & upload assets

    env:
      REF: ${{ inputs.ref }}
      OVERRIDE_VERSION: ${{ inputs.module_version }}

    steps:
      - name: Checkout selected ref
        uses: actions/checkout@v4
        with:
          ref: ${{ env.REF }}
          fetch-depth: 0  # we need refs info for tag checks

      - name: Install tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y jq rsync zip

      - name: Repo metadata
        id: meta
        run: |
          OWNER="${GITHUB_REPOSITORY%/*}"
          REPO="${GITHUB_REPOSITORY#*/}"
          SHORT_SHA="$(git rev-parse --short HEAD)"
          echo "owner=${OWNER}" >> "$GITHUB_OUTPUT"
          echo "repo=${REPO}" >> "$GITHUB_OUTPUT"
          echo "short_sha=${SHORT_SHA}" >> "$GITHUB_OUTPUT"

      - name: Ensure tag exists matching ref
        id: ensuretag
        shell: bash
        run: |
          set -euo pipefail
          REF="${REF}"

          # Does a tag with this exact name already exist?
          if git show-ref --tags --verify --quiet "refs/tags/${REF}"; then
            echo "Tag '${REF}' already exists; will use it as-is."
          else
            # Create an annotated tag at the currently checked-out commit and push it
            echo "Creating tag '${REF}' at HEAD..."
            git tag -a "${REF}" -m "Prerelease tag matching ref ${REF}"
            git push origin "refs/tags/${REF}"
          fi
          echo "tag_name=${REF}" >> "$GITHUB_OUTPUT"

      - name: Read current module.json version from ref
        id: readver
        run: |
          if [[ ! -f module.json ]]; then
            echo "ERROR: module.json not found at repo root." >&2
            exit 1
          fi
          CUR_VER="$(jq -r '.version // empty' module.json)"
          if [[ -z "${CUR_VER}" ]]; then
            echo "ERROR: 'version' not found in module.json." >&2
            exit 1
          fi
          echo "current=${CUR_VER}" >> "$GITHUB_OUTPUT"

      - name: Prepare dist
        run: |
          rm -rf dist
          mkdir -p dist
          rsync -a --delete \
            --exclude ".git" \
            --exclude ".github" \
            ./ dist/

      - name: Compute asset URLs and target version
        id: urls
        run: |
          OWNER="${{ steps.meta.outputs.owner }}"
          REPO="${{ steps.meta.outputs.repo }}"
          TAG="${{ steps.ensuretag.outputs.tag_name }}"

          if [[ -n "${OVERRIDE_VERSION}" ]]; then
            TARGET_VER="${OVERRIDE_VERSION}"
          else
            TARGET_VER="${{ steps.readver.outputs.current }}"
          fi

          MODULE_URL="https://github.com/${OWNER}/${REPO}/releases/download/${TAG}/module.json"
          ZIP_URL="https://github.com/${OWNER}/${REPO}/releases/download/${TAG}/about-time-next.zip"

          echo "target_ver=${TARGET_VER}" >> "$GITHUB_OUTPUT"
          echo "module_url=${MODULE_URL}" >> "$GITHUB_OUTPUT"
          echo "zip_url=${ZIP_URL}" >> "$GITHUB_OUTPUT"

      - name: Rewrite module.json to pin to prerelease asset URLs
        working-directory: dist
        run: |
          set -euo pipefail
          TARGET_VER="${{ steps.urls.outputs.target_ver }}"
          MODULE_URL="${{ steps.urls.outputs.module_url }}"
          ZIP_URL="${{ steps.urls.outputs.zip_url }}"

          jq \
            --arg version   "${TARGET_VER}" \
            --arg manifest  "${MODULE_URL}" \
            --arg download  "${ZIP_URL}" \
            '
              .version  = $version
            | .manifest = $manifest
            | .download = $download
            ' module.json > module.json.tmp

          mv module.json.tmp module.json
          echo "Updated module.json:"
          jq '.' module.json

      - name: Create about-time-next.zip (includes rewritten module.json)
        id: zip
        working-directory: dist
        run: |
          ZIP="about-time-next.zip"
          zip -r "${ZIP}" . -x ".git/*" -x ".github/*"
          echo "zip=${ZIP}" >> "$GITHUB_OUTPUT"

      - name: Create/Update prerelease (tag == ref)
        id: ghrel
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.ensuretag.outputs.tag_name }}
          name: ${{ steps.ensuretag.outputs.tag_name }}
          body: "Automated prerelease for testing.\n\nRef: `${{ env.REF }}`\nVersion: `${{ steps.urls.outputs.target_ver }}`"
          prerelease: true
          draft: false
          generate_release_notes: false
          files: |
            dist/module.json
            dist/${{ steps.zip.outputs.zip }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
